@page "/dealsoftheday"
@inject FlipkartOfferAdapter OfferAdapter
@inject NavigationManager NavManager
@inject AppStateService appState
@implements IDisposable

<ContentHeader ContentList="lstContent"></ContentHeader>

<div class="container-fluid">

    <div class="row">
        <div class="card">
            <div class="card-body">
                <div class="input-group input-group-sm">
                    <SearchByTitle OnSearchChanged="SearchByTitle" />
                </div>
            </div>
        </div>
        <!-- /.col-md-6 -->
        <Deals dealsOfTheDayList="@dealsOfTheDayList" />
        <!-- /.col-md-6 -->
    </div>
    <!-- /.row -->
</div>


@code {
    List<string> lstContent = new List<string> { "Deals of the day" };
    protected List<DealsOfTheDayModel> dealsOfTheDayList;

    string filterByName = string.Empty, filterByValue = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        NavManager.TryGetQueryString<string>("filterByName", out filterByName);
        NavManager.TryGetQueryString<string>("filterByValue", out filterByValue);

        dealsOfTheDayList = await OfferAdapter.GetDealsOfTheDay(filterByName, filterByValue);

        appState.SetdealsOfTheDay(dealsOfTheDayList);
        appState.SetPageTitle("Deals of the day");
    }

    private async Task SearchByTitle(string searchTerm)
    {
        if (!string.IsNullOrEmpty(searchTerm))
        {
            dealsOfTheDayList = dealsOfTheDayList.Where(x => x.title.Contains(searchTerm) || x.name.Contains(searchTerm)).ToList();
        }
        else
        {
            dealsOfTheDayList = await OfferAdapter.GetDealsOfTheDay();
        }
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }
}
