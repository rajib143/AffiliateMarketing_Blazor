@inject OfferProductRepository offerProductRepo

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Recently Added Products</h3>

        <div class="card-tools">
            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                <i class="fas fa-minus"></i>
            </button>
            <button type="button" class="btn btn-tool" data-card-widget="remove">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>
    <!-- /.card-header -->
    <div class="card-body p-0">
        <ul class="products-list product-list-in-card pl-2 pr-2">
            @foreach (var offer in recentlyAddedDeals)
            {
                <li class="item">
                    <div class="product-img">
                        <img src="@(offer.imageUrls_800)" alt="@(offer.shotTitle)" class="img-size-50">
                    </div>
                    <div class="product-info">
                        <a href="@(offer.productUrl)" target="_blank" class="product-title">
                            @(offer.shotTitle)
                            <span class="badge badge-success float-right">@(offer.currency+" "+offer.SellingPrice)</span>
                        </a>
                        <span class="product-description">
                            @(offer.title)
                        </span>
                    </div>
                </li>
            }

        </ul>
    </div>
    <!-- /.card-body -->
    <div class="card-footer text-center">
        <a href="/catagoryoffers" class="uppercase">View Other Offers</a>
    </div>
    <!-- /.card-footer -->
</div>

@code {
    //[Parameter]
    //public IReadOnlyList<DealsOfTheDayModel> recentlyAddedDeals { get; set; }

    public IList<OfferProductViewModel> recentlyAddedDeals { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var offerProducts = await offerProductRepo.GetAllByFilter(1, 5, x => x.shippingCharges == 0 &&( x.categoryPath.Contains("Mobiles") || x.categoryPath.Contains("Electronics")), m => (m.SpecialPrice));
        recentlyAddedDeals = offerProducts.Select(x => new OfferProductViewModel()
        {
            productId = x.productId,
            title = x.title,
            shotTitle = x.shotTitle,
            codAvailable = x.codAvailable,
            CreatedDate = x.CreatedDate,
            currency = x.currency,
            discountPercentage = x.discountPercentage,
            imageUrls_200 = x.imageUrls_200,
            imageUrls_400 = x.imageUrls_400,
            imageUrls_800 = x.imageUrls_800,
            inStock = x.inStock,
            offers = x.offers,
            productUrl = x.productUrl,
            SellingPrice = x.SellingPrice,
            SiteName = x.SiteName,
            SpecialPrice = x.SpecialPrice,
            validTill = x.validTill,
            CategoryId = x.CategoryId,
            CategoryPath = x.categoryPath


        }).ToList();

    }

}
